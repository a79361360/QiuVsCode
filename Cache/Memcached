##认识Memcached
引用 http://www.cnblogs.com/knowledgesea/p/4940713.html

[Memcached官网](http://memcached.org/)

[快速下载文件](http://pan.baidu.com/s/1bofE9MB) 密码: qrgs

##下载与安装
1.服务端安装与命令

![服务端安装文件列表](/img/memcached/steplist.png)

打开CMD命令安装`(使用管理员身份来运行cmd)`
![安装](/img/memcached/install.jpg)

然后再-d start启动memcached服务
其他命令及参数如下:

>* -p 监听的端口
>* -l 连接的IP地址, 默认是本机
>* -d start 启动memcached服务 
>* -d restart 重起memcached服务 
>* -d stop|shutdown 关闭正在运行的memcached服务 
>* -d install 安装memcached服务 
>* -d uninstall 卸载memcached服务 
>* -u 以的身份运行 (仅在以root运行的时候有效) 
>* -m 最大内存使用，单位MB。默认64MB 
>* -M 内存耗尽时返回错误，而不是删除项 
>* -c 最大同时连接数，默认是1024 
>* -f 块大小增长因子，默认是1.25 
>* -n 最小分配空间，key+value+flags默认是48
>* -h 显示帮助

2.客户端使用

![客户端dll文件列表](/img/memcached/stepclientlist.png)

Memcached.ClientLibrary.dll是关健dll
```javascript
public static MemcachedClient cache;
public void Initial(){
	string[] serverlist = { "127.0.0.1:11211", "192.168.1.2:11211" };
	//初始化池
	SockIOPool pool = SockIOPool.GetInstance();
	//设置服务器列表
	pool.SetServers(servers);
	//各服务器之间负载均衡的设置比例
	pool.SetWeights(new int[] { 1, 10 });
	//初始化时创建连接数
	pool.InitConnections = 3;
	//最小连接数
	pool.MinConnections = 3;
	//最大连接数
	pool.MaxConnections = 5;
	//连接的最大空闲时间，下面设置为6个小时（单位ms），超过这个设置时间，连接会被释放掉
	pool.MaxIdle = 1000 * 60 * 60 * 6;
	//socket连接的超时时间，下面设置表示不超时（单位ms），即一直保持链接状态
	pool.SocketConnectTimeout = 0;
	//通讯的超市时间，下面设置为3秒（单位ms），.Net版本没有实现
	pool.SocketTimeout = 1000 * 3;
	//维护线程的间隔激活时间，下面设置为30秒（单位s），设置为0时表示不启用维护线程
	pool.MaintenanceSleep = 30;
	//设置SocktIO池的故障标志
	pool.Failover = true;
	//是否对TCP/IP通讯使用nalgle算法，.net版本没有实现
	pool.Nagle = false;
	//socket单次任务的最大时间（单位ms），超过这个时间socket会被强行中端掉，当前任务失败。
	pool.MaxBusy = 1000 * 10;
	pool.Initialize();
	cache = new MemcachedClient();
	//是否启用压缩数据：如果启用了压缩，数据压缩长于门槛的数据将被储存在压缩的形式
	cache.EnableCompression = false;
	//压缩设置，超过指定大小的都压缩 
	//cache.CompressionThreshold = 1024 * 1024; 
}
private void show() {
	MemcachedClient mc = new MemcachedClient();

	mc.EnableCompression = false;
	var lo = DateTime.Now.Ticks;
	//mc.Add("a", "1234");
	//mc.Add("b", "5678");
	mc.Set("c", lo);
	var ll = mc.Get("c");

	Response.Write(ll);
}
```
这样就已经算是将Memcached用起来了

3.简单说明
* 分布式缓存的设置与应用
```javascript
	string[] serverlist = { "127.0.0.1:11211", "192.168.1.2:11211" };
	//初始化池
	SockIOPool pool = SockIOPool.GetInstance();
	//设置服务器列表
	pool.SetServers(servers);
	//各服务器之间负载均衡的设置比例
	pool.SetWeights(new int[] { 1, 10 });
```
>1. 在127.0.0.1，与192.168.1.2两台机器上装memcached服务端。
>2. pool.SetWeights这里的1跟10意思是，负载均衡比例，假如11000条数据，大致数据分布为：127.0.0.1分布1000条数据左右。另外一台为10000条左右。
>3. memcached服务端并不具备负载均衡的能力，而是memcachedClient实现的，具体存取数据实现的核心是采用一致性Hash算法，把key-value分布到某一台服务器中里边。
* 数据压缩机制
```javascript
	//是否启用压缩数据：如果启用了压缩，数据压缩长于门槛的数据将被储存在压缩的形式
	cache.EnableCompression = false;
	//压缩设置，超过指定大小的都压缩 
	//cache.CompressionThreshold = 1024 * 1024; 
```
>1. 这个处理是在MemcachedClient对象中，设置这个EnableCompression属性，是否使用压缩的意思，如果启用啦压缩功能 ,则ICSharpCode.SharpZipLib类库会在数据超过预设大小时，进行数据压缩处理。
>2. CompressionThreshold这个属性是压缩的阀值，默认是15K，如果超过设定的阀值则使用memcached的通讯协议，存数据时给每个数据项分配一个16为的flag表示，用作记录是否有压缩，如果有压缩则提取数据是进行解压。如果没有超过阀值则不压缩，直接存储。
* 客户端多个SocketIO池
```javascript
public static MemcachedClient cache;
public void Initial(string poolName){
	string[] serverlist = { "127.0.0.1:11211", "192.168.1.2:11211" };
	//初始化池
	SockIOPool pool = SockIOPool.GetInstance(poolName);
	//设置服务器列表
	pool.SetServers(servers);
	//各服务器之间负载均衡的设置比例
	pool.SetWeights(new int[] { 1, 10 });
	//初始化时创建连接数
	pool.InitConnections = 3;
	//最小连接数
	pool.MinConnections = 3;
	//最大连接数
	pool.MaxConnections = 5;
	//连接的最大空闲时间，下面设置为6个小时（单位ms），超过这个设置时间，连接会被释放掉
	pool.MaxIdle = 1000 * 60 * 60 * 6;
	//socket连接的超时时间，下面设置表示不超时（单位ms），即一直保持链接状态
	pool.SocketConnectTimeout = 0;
	//通讯的超市时间，下面设置为3秒（单位ms），.Net版本没有实现
	pool.SocketTimeout = 1000 * 3;
	//维护线程的间隔激活时间，下面设置为30秒（单位s），设置为0时表示不启用维护线程
	pool.MaintenanceSleep = 30;
	//设置SocktIO池的故障标志
	pool.Failover = true;
	//是否对TCP/IP通讯使用nalgle算法，.net版本没有实现
	pool.Nagle = false;
	//socket单次任务的最大时间（单位ms），超过这个时间socket会被强行中端掉，当前任务失败。
	pool.MaxBusy = 1000 * 10;
	pool.Initialize();
	cache = new MemcachedClient();
	//是否启用压缩数据：如果启用了压缩，数据压缩长于门槛的数据将被储存在压缩的形式
	cache.EnableCompression = false;
	//压缩设置，超过指定大小的都压缩 
	//cache.CompressionThreshold = 1024 * 1024; 
	//指定客户端访问的SockIO池
    cache.PoolName = poolName;
}
private void show() {
	MemcachedClient mc = new MemcachedClient();
	//指定客户端访问的SockIO池
	mc.PoolName = "IoFirst";
	mc.EnableCompression = false;
	var lo = DateTime.Now.Ticks;
	mc.Set("c", lo);
	var ll = mc.Get("c");
	
	Response.Write(ll);
}
```







